Project name : go-ticket 
========================

Main goal & focus : 

* provide secure and flexible access control to events
* rest application + backend + generic QR-code reader
* paiement/reservation is out of scope, but API are provided to handle these
* architecture flexible to easily grow/adapt to specific technos

Use case :
==========

* provide access control (ticketing) using any qr code reader
	- alternatively (step 2 ?), have an android appli run the qr-reader ?
* features (online) include :
	- admin (web ): register users, manage rights (event based, multiple reentry, access gate limits, ...
	- admin (android) : simple admin interface : review ? reset user/tkt ? ...
	- admin : preshow : make pdf tkts and send by mail, whatsapp, webaccess, ...
	- exploit (android): read tickets (pass/refuse/warn), record context info (gps ? ip ? => init ip for control to prevent auto-scan ?), the notion of registering authorized controllers ?
	- exploit (android) : various categories of readers : Access (read only once, invalidate), Control (read anywhere, get recorded info, do not record entry, ...), Test (basic ping), Admin ( ...)

* features (off line) :
	- online tickets hae a multiple entry parameter : single time, n times, once, once with multiple scan within x minutes, ...
	- online tickets may return various control information upon accepted, warn or reject : picture, last entry attempt, number of entries, ...
	- handling of group tickets ?

	- offline tickets with data that can be controlled manually ?
	- offline degraded mode if server not available ?

Architecture 
============

Core packages :
===============

* main (cli) 
 	- single cli with flags
	- start server or a http-client in various modes
	- cli test client utility 
	- upload to data store
 	- edit paper tickets ? (template driven ...)

* configuration (Viper) : gets config from flags and/or config files
	- only place where implementation packages get imported to provide variables of the expected interface for future use
	- no config change after startup ?
	- print config for debugging ?

* server serve requests, run either in admin/exploit or both mode, 
	- url format : xxx/c/3654654654(open) ; xxx/admin/....(authenticated)  xxx/ping (open) xxx/ (home, welcome page, doc, ...) ... calls admin or exploit handlers
	- where to attach the config object ?
	

Business logic packages (should not import implementation packages)
===================================================================

* common (data structure and interfaces) : 
	- list of date controlled, picture, name, event, time-frame, validity/paiement done, reserved/confirmed
	- interfaces for implementation packages
	- errors
	- configuration (dns, url format, secrets, ... with mostly default values)

* admin (server handlers, attach to server ?) - main admin application 
	- REVIEW-MODIFY : web interface ? (review, load datastore, configure ...), manage events, multi-events, copy from previous event, time-window, ..
	- SINGLE CREATE : authenticated REST api to create a new ticket (send it by mail ? download available ?)
	- BULK CREATE : ...
	- MONITOR : perfomance monitoring ?
	- send mails, whatsapp, prnt ...

* exploit (server handlers, attach to server ?) - main exploitation interface 
	- scan interface

Implementation packages that can change :
=========================================

* datastore
 	- read/save common data structure
	- includes backend access for persistence (flexible change) 
	- lazy persistence	
* produce pdf (s)
* send message (mail, sms, whatsapp, ...)
* print

Mock packages for testing
=========================
* unit & e2e testing ?
* load testing for exploit ?

Technos :
=========

* OAuth to differentiate Access/Control/Test/Admin ? (gmail ?)
* Use qr-code reader from store ? (authorize terminals first ? : cookies ? IPS ? )
* which backend ? ( mongo ? google sheet ? file or sqli ? aws s3 ? go datastore generic interface ? ...)
* configuration via files, use Viper ?
